(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{910:function(e,s,t){"use strict";t.r(s);var r=t(7),o=t(36),i=(t(54),t(562)),n=t(734),c=t(573),a=t(738);s.default=class{async decode(e){const s=await Object(n.a)(e.data,e.options);return s&&s.toJSON()}symbolize(e){e.pixelBlock=i.a.fromJSON(e.pixelBlock),e.extent=e.extent?o.a.fromJSON(e.extent):null;const s=this.symbolizer.symbolize(e);return Object(r.r)(s&&s.toJSON())}async updateSymbolizer(e){this.symbolizer=a.a.fromJSON(e.symbolizerJSON),e.histograms&&this.symbolizer&&this.symbolizer.renderer&&"histograms"in this.symbolizer.renderer&&(this.symbolizer.renderer.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(i.a.fromJSON(e.srcPixelBlock),e.stretchParams);return Object(r.r)(s&&s.toJSON())}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map(e=>e?new i.a(e):null),t=Object(c.h)(s,e.srcMosaicSize);if(!e.coefs)return t&&t.toJSON();const r=Object(c.a)(t,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return r&&r.toJSON()}}}}]);